import React, { useContext, useState } from "react";
import { FocusContext } from "../operations/FocusContext";

export const Block = ({  num, status,sounder }: { num: number, status: string,sounder:(id:any)=>void }) => {
    const {state,dispatch}=useContext(FocusContext)

    
    const [wrong,setWrong]=useState(false)
    let content:any = num
    switch (status) {
        case 'idle':
            content = <MagIcon/>;
            break;
        case 'running':
            content = num;
            break;
        case 'timeout':
            break;
        default:
            break;
    } 
    const handleClick = () => {
        if(status.includes('running')&&num!==0){
            let modifiedArr=[];
            const answer=findMin(state.arr??[]);
            if(num===answer){
                if(!state.arr)return;
                modifiedArr=state.arr?.map((val)=>{
                    if(val===num){
                        return 0
                    }
                    return val
                })
                if(modifiedArr.every(n=>n===0)){
                    sounder({id:'correct'})
                   sounder({id:'success'})
                    dispatch({type:'set_game_status',status:'success',arr:modifiedArr,btnText:'well done!'})
                }else{
                    sounder({id:'correct'})
                    dispatch({type:'set_game_status',status:"running_click_success",btnText:state.btnText,arr:modifiedArr})
                }
                
            }else{
                sounder({id:'wrong'})
                setWrong(true)
                setTimeout(() => {
                    setWrong(false)
                }, 300);
            }
        }
        
    }
    if(content!==0){
        return (
            <button className={`square`} onClick={handleClick}>
                <div className={`h-8 w-8 ${wrong?"shake":""}`}>
                {wrong?<BianIcon/>:content}
                </div>
                </button>
        )
    }else{
        return (
            <button className="square" onClick={handleClick}>
                <div className="h-8 w-8">
                <HeartIcon/>
                </div>
                </button>
        )
    }


}


export const HeartIcon=()=>{

    return (
        <svg className="h-6 w-6 fill-pink-600" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="6261" width="200" height="200"><path d="M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9z" p-id="6262" fill="#d4237a"></path></svg>
    )
}
export const QuestionIcon=()=>{

    return (
        <svg className="h-6 w-6 fill-sky-500" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="7117" width="200" height="200"><path d="M559.261538 748.307692h-98.461538c-15.753846 0-27.569231-11.815385-27.569231-27.56923v-29.538462c0-82.707692 53.169231-157.538462 131.938462-185.107692 23.630769-7.876923 45.292308-21.661538 63.015384-41.353846 98.461538-118.153846 7.876923-259.938462-110.276923-263.876924-43.323077-1.969231-84.676923 13.784615-116.184615 43.323077-25.6 23.630769-41.353846 53.169231-45.292308 86.646154-1.969231 11.815385-13.784615 21.661538-29.538461 21.661539h-98.461539c-17.723077 0-31.507692-13.784615-29.538461-31.507693 7.876923-74.830769 41.353846-141.784615 94.523077-194.953846 63.015385-59.076923 143.753846-90.584615 230.4-88.615384C687.261538 43.323077 821.169231 177.230769 827.076923 340.676923c5.907692 137.846154-78.769231 261.907692-206.769231 309.169231-17.723077 7.876923-29.538462 21.661538-29.538461 39.384615v29.538462c0 17.723077-15.753846 29.538462-31.507693 29.538461zM590.769231 955.076923c0 15.753846-13.784615 29.538462-29.538462 29.538462h-98.461538c-15.753846 0-29.538462-13.784615-29.538462-29.538462v-98.461538c0-15.753846 13.784615-29.538462 29.538462-29.538462h98.461538c15.753846 0 29.538462 13.784615 29.538462 29.538462v98.461538z" p-id="7118"></path></svg>
    )
}
export const MagIcon=()=>{
    return (
        <svg className="h-8 w-8 fill-sky-500" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="18128" width="200" height="200"><path d="M897.6064 834.1824l-66.016 66.6176-180.8896-181.9456c-53.2608 41.0496-119.5776 65.6896-191.7376 65.6896-174.8352 0-316.5696-143.0336-316.5696-319.4688S284.128 145.6 458.9632 145.6c174.8224 0 316.5568 143.0272 316.5568 319.4688 0 69.5744-22.2784 133.7728-59.7056 186.2208L897.6064 834.1824zM458.9632 223.0592c-132.4608 0-239.84 108.3456-239.84 242.0096s107.3728 242.0224 239.84 242.0224c132.4288 0 239.8016-108.3584 239.8016-242.0224S591.392 223.0592 458.9632 223.0592z" p-id="18129" fill="#1296db"></path></svg>
    )
}
export const BianIcon=()=>{
    return (
        <svg className="h-8 w-8 fill-yellow-800" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="21321" width="200" height="200"><path d="M550.7072 159.778133c-8.533333 31.812267-10.069333 55.978667-4.676267 72.567467 8.0896 24.849067 30.72 40.413867 43.588267 44.202667 12.868267 3.754667 30.276267-0.750933 48.2304 23.074133 16.554667 21.981867 21.230933 53.896533 16.964267 67.413333l-0.580267-0.068266c55.9104-1.706667 90.760533 14.062933 104.516267 47.240533 11.6736 28.228267 12.1856 55.876267 3.857066 82.773333h1.706667c7.7824 1.706667 31.095467 7.850667 45.9776 15.940267 48.469333 26.487467 98.2016 66.286933 73.3184 165.2736-24.849067 98.986667-164.317867 161.518933-294.024533 176.128-129.706667 14.609067-266.5472-5.12-322.1504-24.814933-55.637333-19.694933-155.818667-78.779733-160.938667-189.474134-3.413333-73.796267 30.4128-120.763733 101.4784-140.868266h1.536a173.738667 173.738667 0 0 1 2.8672-53.725867c8.260267-40.7552 46.557867-70.109867 114.926933-88.064a108.9536 108.9536 0 0 1 2.4576-24.3712c10.1376-47.0016 27.136-76.970667 72.260267-108.817067 30.037333-21.230933 79.633067-42.666667 148.6848-64.4096z" fill="#C29876" p-id="21322"></path><path d="M810.2912 512.9216c48.469333 26.487467 98.2016 66.286933 73.3184 165.2736-24.849067 98.986667-164.317867 161.518933-294.024533 176.128-129.706667 14.609067-266.5472-5.12-322.1504-24.814933a294.741333 294.741333 0 0 1-64.853334-32.938667c57.617067 19.2512 191.556267 37.956267 318.737067 23.620267 129.706667-14.609067 269.175467-77.141333 294.024533-176.128 19.217067-76.458667-6.075733-117.589333-40.891733-144.554667 10.376533 2.8672 25.258667 7.645867 35.84 13.4144z m-51.541333-98.7136c10.9568 26.487467 12.0832 52.462933 5.290666 77.789867a295.253333 295.253333 0 0 0-22.016-13.2096c-14.882133-8.123733-38.1952-14.2336-45.9776-15.940267h-1.706666a118.510933 118.510933 0 0 0-3.857067-82.773333 68.778667 68.778667 0 0 0-6.485333-12.151467c38.7072 4.027733 63.624533 19.456 74.752 46.2848z m-169.130667-137.659733c12.868267 3.754667 30.276267-0.750933 48.2304 23.074133 10.001067 13.312 15.701333 30.208 17.646933 44.475733-17.6128-8.3968-40.789333-12.117333-69.5296-11.264h0.546134l0.853333-3.3792c2.423467-13.653333-1.706667-38.980267-14.165333-58.709333l-3.618134-5.256533a79.394133 79.394133 0 0 0-0.477866-0.6144c7.338667 6.075733 14.848 10.001067 20.48 11.6736z m-38.912-116.736c-8.533333 31.744-10.069333 55.978667-4.676267 72.533333 2.594133 7.9872 6.724267 15.018667 11.537067 21.026133-13.550933-10.103467-26.248533-8.021333-36.215467-10.9568-12.868267-3.754667-35.498667-19.3536-43.588266-44.202666a61.952 61.952 0 0 1-2.491734-11.6736c21.8112-8.874667 46.967467-17.8176 75.434667-26.760534z" fill="#B18665" p-id="21323"></path><path d="M550.7072 159.778133c-8.533333 31.812267-10.069333 55.978667-4.676267 72.567467 8.0896 24.849067 30.72 40.413867 43.588267 44.202667 12.868267 3.754667 30.276267-0.750933 48.2304 23.074133 15.291733 20.309333 20.445867 49.0496 17.749333 63.965867l-0.8192 3.413333 8.123734-0.136533c50.858667 0.136533 82.807467 15.906133 95.8464 47.342933 11.6736 28.228267 12.1856 55.876267 3.857066 82.773333h1.706667c7.7824 1.706667 31.095467 7.850667 45.9776 15.940267 48.469333 26.487467 98.2016 66.286933 73.3184 165.2736-16.008533 63.6928-79.428267 112.298667-157.184 142.7456 44.782933-28.501333 77.960533-65.024 88.917333-108.612267 24.917333-98.986667-24.849067-138.786133-73.3184-165.2736-14.882133-8.123733-38.1952-14.2336-45.9776-15.940266h-1.706666a118.510933 118.510933 0 0 0-3.857067-82.773334c-13.755733-33.1776-48.605867-48.913067-104.516267-47.240533h0.546134l0.853333-3.3792c2.423467-13.653333-1.706667-38.980267-14.165333-58.709333l-3.618134-5.256534c-17.954133-23.825067-35.362133-19.319467-48.2304-23.074133-12.868267-3.754667-35.498667-19.3536-43.588266-44.202667-5.393067-16.5888-3.822933-40.7552 4.676266-72.567466-28.2624 8.874667-53.248 17.749333-74.9568 26.5216l-5.461333 3.754666c30.037333-21.230933 79.633067-42.666667 148.6848-64.4096z" fill="#B18665" p-id="21324"></path><path d="M764.791467 482.304l2.628266 0.341333c15.598933 3.413333 36.386133 10.0352 49.902934 17.408 73.045333 39.936 103.424 90.555733 80.554666 181.725867-24.712533 98.167467-155.306667 170.0864-306.653866 187.118933-116.462933 13.141333-258.321067-0.648533-328.704-25.565866-90.999467-32.221867-166.126933-103.7312-170.666667-202.615467-3.754667-80.622933 34.474667-133.700267 112.128-155.682133a14.677333 14.677333 0 1 1 7.9872 28.2624c-64.512 18.2272-93.9008 59.050667-90.794667 126.0544 3.8912 84.548267 70.178133 147.6608 151.1424 176.3328 66.013867 23.3472 203.434667 36.693333 315.5968 24.064 140.5952-15.837867 260.539733-81.92 281.463467-165.137067 19.217067-76.458667-3.754667-114.688-66.116267-148.821333-10.513067-5.7344-29.013333-11.605333-42.0864-14.472534a14.677333 14.677333 0 0 1 3.618134-29.013333z" fill="#333333" p-id="21325"></path><path d="M662.4256 352.187733c53.76 0.068267 90.350933 16.725333 107.349333 50.858667l2.525867 5.5296c21.845333 52.736 9.659733 105.949867-31.709867 157.696-38.912 48.708267-79.2576 72.192-154.862933 89.4976a348.842667 348.842667 0 0 1-155.8528 0 14.677333 14.677333 0 1 1 6.417067-28.637867 319.488 319.488 0 0 0 142.882133 0c69.4272-15.872 103.936-35.9424 138.513067-79.189333 35.157333-44.032 44.8512-86.254933 27.477333-128.1024-10.376533-25.122133-36.864-38.229333-82.261333-38.2976l-8.192 0.1024-3.754667-0.341333-9.557333-2.218667 12.151466-9.045333c2.048-3.6864 3.003733-10.0352 2.696534-17.749334l6.178133-0.1024z m-334.2336-10.24c-1.2288 9.728-1.194667 19.933867 0.375467 30.276267-58.641067 15.7696-92.091733 40.072533-100.795734 71.953067l-1.024 4.164266c-12.9024 63.931733 9.728 115.882667 69.5296 158.208a14.677333 14.677333 0 1 1-16.964266 23.9616c-68.983467-48.8448-96.597333-112.298667-81.3056-187.972266 9.659733-47.854933 52.701867-80.7936 128.4096-100.113067z" fill="#333333" p-id="21326"></path><path d="M546.304 145.749333a14.677333 14.677333 0 0 1 18.568533 17.8176c-7.850667 29.320533-9.216 50.8928-4.881066 64.238934 5.393067 16.5888 21.367467 31.0272 33.757866 34.645333l2.6624 0.6144 4.471467 0.648533c22.186667 2.833067 34.474667 8.192 48.674133 27.067734 19.456 25.770667 27.2384 67.857067 16.759467 86.4256a14.677333 14.677333 0 0 1-25.6-14.370134c3.9936-7.0656-1.570133-37.102933-14.574933-54.3744-7.645867-10.103467-12.6976-13.073067-24.337067-14.984533l-8.260267-1.160533-5.5296-1.024a49.834667 49.834667 0 0 1-2.525866-0.682667c-21.333333-6.2464-44.885333-27.511467-53.418667-53.725867-4.096-12.629333-4.881067-28.0576-2.56-46.421333l1.297067-8.8064c-51.268267 17.3056-89.531733 34.269867-114.756267 50.722133l-5.563733 3.7888c-39.970133 28.228267-56.4224 53.828267-66.389334 99.9424-10.513067 48.64 16.247467 97.518933 80.896 123.050667 47.3088 18.7392 92.125867 6.485333 136.772267-38.4a14.677333 14.677333 0 1 1 20.821333 20.718933c-52.497067 52.736-109.431467 68.266667-168.413866 44.987734-77.858133-30.788267-112.3328-93.764267-98.781867-156.5696 11.502933-53.179733 32.085333-85.162667 78.165333-117.691734 31.573333-22.289067 82.363733-44.305067 152.746667-66.423466z" fill="#333333" p-id="21327"></path><path d="M286.173867 431.991467a17.066667 17.066667 0 0 1 23.005866 7.236266c16.7936 32.221867 37.239467 53.930667 61.269334 65.774934 24.405333 12.014933 45.9776 15.906133 65.058133 12.1856a17.066667 17.066667 0 1 1 6.519467 33.518933c-26.999467 5.256533-55.978667 0.034133-86.664534-15.086933-31.0272-15.291733-56.490667-42.325333-76.458666-80.5888a17.066667 17.066667 0 0 1 7.2704-23.04zM160.904533 568.797867a17.066667 17.066667 0 0 1 21.947734 10.001066c12.765867 33.9968 30.378667 58.0608 52.804266 72.738134 22.7328 14.916267 43.690667 21.367467 63.112534 20.036266a17.066667 17.066667 0 1 1 2.389333 34.030934c-27.477333 1.911467-55.6032-6.7584-84.206933-25.4976-28.945067-18.978133-50.8928-48.9472-66.048-89.326934a17.066667 17.066667 0 0 1 10.001066-21.981866z" fill="#D0A583" p-id="21328"></path></svg>
    )
}
function findMin(numArr:number[]):number{
    let temp=numArr.length
    for(let i=0;i<numArr.length;i++){
        if(numArr[i]!==0){
            if(numArr[i]<temp){
                temp=numArr[i]
            }
        }
    }
    return temp
}